# Tableau RTUPB (post-opératoire) 
# -------------------------------- 

# ******************************************
# PAM
# ******************************************
duplicated(postRTUPB)
sil<-numeric(20)
for(k in 2:20) { sil[[k]]<-cluster::pam(postRTUPB,k)$silinfo$avg.width }
plot(2:20, sil[2:20], main = "postRTUPB clustering using PAM", xlab = "#clusters", ylab="sil.avg.width", sub="from 2 to 20")
abline(v = 2, col = "red")
abline(v = 3, col = "red")
abline(v = 13, col = "blue")

# k=2 - vérification 
plot(cluster::pam(postRTUPB, 2))
duplicated(postRTUPB[c(11,28,33),])
duplicated(rawRTUPB[c(11,28,33),])
#
plot(cluster::pam(postRTUPB, 3))
plot(cluster::pam(postRTUPB, 13))
respam13<-cluster::pam(postRTUPB, 13)

# ******************************************
# CAH
# ******************************************
rescah<-hclust(dist(postRTUPB), method="ward")
plot(hclust(dist(postRTUPB)), hang=-1)
rect.hclust(rescah, 13)

# ******************************************
# Profils de guérison
# ******************************************
IPSSmedoids<-NULL
QoLmedoids<-NULL
QMaxmedoids<-NULL
for (k in 1:13) { 
  IPSSmedoids<-rbind(IPSSmedoids, postRTUPB[respam13$medoids[k],c(1,4,7,10,13,16,19)])
  QoLmedoids<-rbind(QoLmedoids, postRTUPB[respam13$medoids[k],c(2,5,8,11,14,17,20)])
  QMaxmedoids<-rbind(QMaxmedoids, postRTUPB[respam13$medoids[k],c(3,6,9,12,15,18,21)])
}
par(mfrow=c(1,3))
for (m in 1:13) {
 plot( x <- c(1:7), y <- IPSSmedoids[m, x], type = "l", col= m, xaxt = "n", xlab="# months", main = paste("IPSS for RTUPB profile #", as.character(m)))
 axis(1, at=1:7, labels=c(1,3,6,9,12,15,18))
 plot( x <- c(1:7), y <- QoLmedoids[m, x], type = "l", col= m, xaxt = "n", xlab="# months",, main = paste("QoL for RTUPB profile #", as.character(m)))
 axis(1, at=1:7, labels=c(1,3,6,9,12,15,18))
 plot( x <- c(1:7), y <- QMaxmedoids[m, x], type = "l", col= m, xaxt = "n", xlab="# months",, main = paste("QMax for RTUPB profile #", as.character(m))) 
 axis(1, at=1:7, labels=c(1,3,6,9,12,15,18))
}

# Tableau VBPPS (post-opératoire) 
# -------------------------------- 

# ******************************************
# PAM
# ******************************************
sil<-numeric(20)
for(k in 2:20) { sil[[k]]<-cluster::pam(postVPPBS,k)$silinfo$avg.width }
plot(2:20, sil[2:20], main = "postVPPBS clustering using PAM", xlab = "#clusters", ylab="sil.avg.width", sub="from 2 to 20")
abline(v = 4, col = "red")
abline(v = 12, col = "blue")

plot(cluster::pam(postVPPBS, 4))
plot(cluster::pam(postVPPBS, 12))
respam12 = cluster::pam(postVPPBS, 12)

# ******************************************
# CAH
# ******************************************
rescah<-hclust(dist(postVPPBS), method="ward")
plot(hclust(dist(postVPPBS)), hang=-1)
rect.hclust(rescah, 12)

# ******************************************
# Profils de guérison
# ******************************************
IPSSmedoids<-NULL
QoLmedoids<-NULL
QMaxmedoids<-NULL
for (k in 1:12) { 
  IPSSmedoids<-rbind(IPSSmedoids, VBPPSpost[respam10$medoids[k],c(1,4,7,10,13,16,19)])
  QoLmedoids<-rbind(QoLmedoids, VBPPSpost[respam10$medoids[k],c(2,5,8,11,14,17,20)])
  QMaxmedoids<-rbind(QMaxmedoids, VBPPSpost[respam10$medoids[k],c(3,6,9,12,15,18,21)])
}
par(mfrow=c(1,3))
for (m in 1:12) {
 plot( x <- c(1:7), y <- IPSSmedoids[m, x], type = "l", col= m, xaxt = "n", xlab="# months", main = paste("IPSS for VPPBS profile #", as.character(m)))
 axis(1, at=1:7, labels=c(1,3,6,9,12,15,18))
 plot( x <- c(1:7), y <- QoLmedoids[m, x], type = "l", col= m, xaxt = "n", xlab="# months", main = paste("QoL for VPPBS profile #", as.character(m)))
 axis(1, at=1:7, labels=c(1,3,6,9,12,15,18))
 plot( x <- c(1:7), y <- QMaxmedoids[m, x], type = "l", col= m, xaxt = "n", xlab="# months", main = paste("QMax for VPPBS profile #", as.character(m))) 
 axis(1, at=1:7, labels=c(1,3,6,9,12,15,18))
}


# Tableau VAPOR (post-opératoire) 
# -------------------------------- 
library(readxl)
rawVAPOR <- read_excel("VAPOR.xlsx", col_types = c("skip", 
    "numeric", "logical", "numeric", "logical", 
    "numeric", "numeric", "numeric", "numeric", 
    "numeric", "numeric", "numeric", "numeric", 
    "logical", "numeric", "logical", "numeric", 
    "numeric", "numeric", "logical", "logical", 
    "numeric", "numeric", "numeric", "numeric", 
    "numeric", "numeric", "numeric", "numeric", 
    "numeric", "numeric", "numeric", "numeric", 
    "numeric", "numeric", "numeric", "numeric", 
    "numeric", "numeric", "numeric", "numeric", 
    "numeric"), skip = 1)
View(rawVAPOR)
preVAPOR<-rawVAPOR[,c(1:20)]
preVAPOR_clean<-rawVAPOR[!duplicated(rawVAPOR),-c(10,11,12,14)]

# ******************************************
# PAM
# ******************************************
sil<-numeric(20)
for(k in 2:20) { sil[[k]]<-cluster::pam(preVAPOR_clean,k)$silinfo$avg.width }
plot(2:20, sil[2:20], main = "preVAPOR clustering using PAM", xlab = "#clusters", ylab="sil.avg.width", sub="from 2 to 20")
